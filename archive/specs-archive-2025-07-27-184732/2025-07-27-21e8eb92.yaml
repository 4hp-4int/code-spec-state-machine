metadata:
  id: 21e8eb92
  title: A user-friendly interface for selecting and using prompt templates during
    spe...
  inherits: []
  created: '2025-07-27T08:10:27.805937'
  version: '1.0'
  status: implemented
  parent_spec_id: null
  child_spec_ids: null
context:
  project: agentic-spec-foundation
  domain: Python CLI tool for AI-powered specification generation
  dependencies:
  - name: typer
    version: 0.12.0
    description: Used for building CLI interfaces; already present in the codebase.
  - name: pyyaml
    version: 6.0.2
    description: Used for reading YAML template files; already present in the codebase.
  files_involved:
  - agentic_spec/cli.py
  - agentic_spec/template_loader.py
  - agentic_spec/prompt_engineering.py
  - templates/
  - tests/test_cli.py
requirements:
  functional:
  - List all available prompt templates (e.g., basic-specification, feature-addition,
    bug-fix, refactoring) from the templates/ directory.
  - Allow users to browse and preview the content or summary of each template before
    selection.
  - Enable users to select a template interactively via CLI (menu or prompt) or through
    a simple textual UI (e.g., numbered list with input).
  - Integrate template selection into the existing specification generation workflow.
  - Display clear, concise instructions and feedback during template selection.
  - Support both interactive and non-interactive (flag-based) template selection for
    scripting/automation.
  non_functional:
  - Ensure the interface is intuitive and requires minimal learning curve for solo
    developers.
  - Maintain fast response times for listing and previewing templates (sub-second
    for <50 templates).
  - Provide informative error messages for missing or malformed templates.
  - Maintain compatibility with Windows and Unix line endings.
  - Ensure all new code is covered by unit tests.
  constraints:
  - Do not introduce new dependencies unless absolutely necessary; leverage Typer
    for CLI and PyYAML for template handling.
  - Follow existing codebase structure and coding standards (async/await, type hints,
    pathlib.Path, error handling, etc.).
  - Store all templates in human-readable YAML format in the templates/ directory.
  - Do not use external databases or services.
  - Maintain lint compliance and pass all pre-commit hooks.
  - Support Python 3.12+ only.
implementation:
- task: Extend template_loader.py to enumerate and load template metadata
  details: Implement functions to scan the templates/ directory, extract template
    names, and load a summary or description from each YAML file. Ensure robust error
    handling for malformed or missing files.
  files:
  - agentic_spec/template_loader.py
  acceptance: Function returns a list of available templates with name and summary;
    errors are handled gracefully.
  estimated_effort: medium
  step_id: 21e8eb92:0
  sub_spec_id: null
  decomposition_hint: null
  progress: null
  approvals: null
- task: Add CLI commands for browsing and previewing templates
  details: Update cli.py to add a new command (e.g., 'list-templates' or 'browse-templates')
    that displays available templates with summaries. Implement a preview feature
    to show the full content or a detailed description of a selected template.
  files:
  - agentic_spec/cli.py
  acceptance: User can list and preview templates via CLI; output is clear and formatted
    for readability.
  estimated_effort: medium
  step_id: 21e8eb92:1
  sub_spec_id: null
  decomposition_hint: null
  progress: null
  approvals: null
- task: Implement interactive template selection workflow
  details: Add an interactive prompt (using Typer's prompt or confirm features) that
    allows users to select a template from the list. Support both interactive (menu-driven)
    and non-interactive (flag-based) selection modes.
  files:
  - agentic_spec/cli.py
  acceptance: User can select a template interactively or via CLI flags; selection
    is integrated into the spec generation flow.
  estimated_effort: medium
  step_id: 21e8eb92:2
  sub_spec_id: null
  decomposition_hint: null
  progress: null
  approvals: null
- task: Integrate template selection into specification generation
  details: Modify the relevant CLI command(s) to require or accept a template selection
    before generating a specification. Ensure the selected template is passed through
    to the prompt_engineering and generation logic.
  files:
  - agentic_spec/cli.py
  - agentic_spec/prompt_engineering.py
  acceptance: Specification generation uses the selected template; workflow is seamless
    for the user.
  estimated_effort: medium
  step_id: 21e8eb92:3
  sub_spec_id: null
  decomposition_hint: null
  progress: null
  approvals: null
- task: Write unit tests for template browsing, preview, and selection
  details: Add tests to verify correct listing, previewing, and selection of templates,
    including error cases (e.g., missing template, malformed YAML).
  files:
  - tests/test_cli.py
  acceptance: All new functionality is covered by tests; tests pass and cover edge
    cases.
  estimated_effort: medium
  step_id: 21e8eb92:4
  sub_spec_id: null
  decomposition_hint: null
  progress: null
  approvals: null
review_notes:
- Clarify the expected YAML schema for templates (e.g., required fields like 'name'
  and 'summary'); without this, extraction logic may break or require guesswork.
- "Be explicit about how to handle malformed or missing YAML fields\u2014should templates\
  \ with errors be skipped, partially loaded, or should the CLI display a warning?"
- For interactive selection, Typer's prompt is basic; if a richer menu is needed (e.g.,
  arrow-key navigation), clarify if this is in scope or if a simple numbered input
  is sufficient.
- Ensure template loading and CLI listing logic are decoupled so that future changes
  (e.g., adding template categories or metadata) don't require major refactoring.
context_parameters: null
feedback_history: []
work_logs: null
