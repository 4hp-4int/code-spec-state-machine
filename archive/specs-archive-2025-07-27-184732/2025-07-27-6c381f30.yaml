metadata:
  id: 6c381f30
  title: Prompt editing functionality that allows users to edit prompts using their
    sy...
  inherits: []
  created: '2025-07-27T06:51:40.897935'
  version: '1.0'
  status: implemented
  parent_spec_id: null
  child_spec_ids: null
context:
  project: agentic-spec
  domain: Python CLI tool for AI-powered specification generation
  dependencies:
  - name: openai
    version: 1.97.1
    description: 'Core dependency: openai'
  - name: pyyaml
    version: 6.0.2
    description: 'Core dependency: pyyaml'
  - name: networkx
    version: '3.3'
    description: 'Core dependency: networkx'
  - name: matplotlib
    version: 3.9.2
    description: 'Core dependency: matplotlib'
  - name: jinja2
    version: 3.1.0
    description: 'Core dependency: jinja2'
  - name: typer
    version: 0.12.0
    description: 'Core dependency: typer'
  - name: pytest-cov
    version: 6.2.1
    description: 'Core dependency: pytest-cov'
  files_involved:
  - agentic_spec/cli.py
  - agentic_spec/prompt_editor.py
  - tests/test_prompt_editor.py
requirements:
  functional:
  - Implement a new CLI command `agentic-spec prompt edit <name>` that allows users
    to edit existing prompts using their system's default text editor.
  - Ensure cross-platform compatibility, supporting both Unix-like systems and Windows.
  - Handle temporary files appropriately to prevent data loss or corruption during
    the editing process.
  - Provide informative error messages for scenarios such as missing prompt files
    or issues launching the editor.
  non_functional:
  - Maintain consistency with existing codebase architecture and coding standards.
  - Ensure the implementation is efficient and does not introduce significant performance
    overhead.
  - Write comprehensive unit tests to cover various scenarios, including successful
    edits, user cancellations, and error conditions.
  constraints:
  - Use Python 3.12+ features as per project requirements.
  - Avoid introducing new dependencies unless absolutely necessary; prefer utilizing
    existing standard library modules.
  - Ensure the solution adheres to the project's coding standards, including the use
    of async/await for I/O operations and proper error handling.
implementation:
- task: Implement the `agentic-spec prompt edit <name>` CLI command.
  details: Add a new command to `cli.py` that accepts a prompt name as an argument
    and invokes the editing functionality.
  files:
  - agentic_spec/cli.py
  acceptance: Running `agentic-spec prompt edit <name>` opens the specified prompt
    in the user's default text editor.
  estimated_effort: medium
  step_id: 6c381f30:0
  sub_spec_id: null
- task: Develop the prompt editing functionality with cross-platform support.
  details: Create a new module `prompt_editor.py` that handles opening the specified
    prompt file in the user's default text editor, considering cross-platform compatibility.
  files:
  - agentic_spec/prompt_editor.py
  acceptance: The `prompt_editor.py` module successfully opens prompt files in the
    default text editor across different operating systems.
  estimated_effort: high
  step_id: 6c381f30:1
  sub_spec_id: null
- task: Implement temporary file handling to manage unsaved changes.
  details: Ensure that temporary files are used during the editing process to prevent
    data loss, and changes are saved back to the original prompt file upon successful
    editing.
  files:
  - agentic_spec/prompt_editor.py
  acceptance: Edits made to the prompt are saved correctly, and temporary files are
    cleaned up after the editing session.
  estimated_effort: medium
  step_id: 6c381f30:2
  sub_spec_id: null
- task: Provide informative error handling and messages.
  details: Implement error handling for scenarios such as missing prompt files, issues
    launching the editor, or user cancellations, and provide clear error messages.
  files:
  - agentic_spec/prompt_editor.py
  acceptance: Users receive clear and informative error messages when issues occur
    during the editing process.
  estimated_effort: medium
  step_id: 6c381f30:3
  sub_spec_id: null
- task: Write unit tests for the prompt editing functionality.
  details: Develop comprehensive unit tests in `test_prompt_editor.py` to cover various
    scenarios, including successful edits, user cancellations, and error conditions.
  files:
  - tests/test_prompt_editor.py
  acceptance: All unit tests pass, ensuring the robustness of the prompt editing functionality.
  estimated_effort: medium
  step_id: 6c381f30:4
  sub_spec_id: null
review_notes:
- 'Missing Implementation Details: The spec does not specify how prompt files are
  located (e.g., directory structure, file extension, or config), which is critical
  for implementing the edit command and error handling.'
- "Technical Gotchas: Cross-platform editor launching can be tricky\u2014consider\
  \ using Python's `os.startfile` (Windows), `subprocess.run(['open', ...])` (macOS),\
  \ and `subprocess.run(['xdg-open', ...])` (Linux), but be aware of edge cases where\
  \ no GUI editor is set or $EDITOR is unset in headless environments."
- 'Integration Points: If the CLI already uses Typer, ensure the new command is registered
  in a way that doesn''t conflict with existing subcommands or argument parsing logic.'
- 'Quick Wins: For temporary file handling, Python''s `tempfile.NamedTemporaryFile(delete=False)`
  is robust and cross-platform; ensure cleanup in all code paths, including exceptions
  and user cancellations.'
context_parameters: null
feedback_history: []
