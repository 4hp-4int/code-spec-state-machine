context:
  project: agentic-spec
  domain: Python CLI tool for AI-powered specification generation
  dependencies:
  - name: openai
    version: 1.97.1
    description: 'Core dependency: openai'
  - name: pyyaml
    version: 6.0.2
    description: 'Core dependency: pyyaml'
  - name: networkx
    version: '3.3'
    description: 'Core dependency: networkx'
  - name: matplotlib
    version: 3.9.2
    description: 'Core dependency: matplotlib'
  - name: jinja2
    version: 3.1.0
    description: 'Core dependency: jinja2'
  - name: typer
    version: 0.12.0
    description: 'Core dependency: typer'
  - name: pytest-cov
    version: 6.2.1
    description: 'Core dependency: pytest-cov'
  architecture_overview: agentic-spec is a Python CLI tool that generates detailed
    programming specifications using AI with template inheritance and review workflows.
  current_codebase_structure: "agentic_spec/\n\u251C\u2500\u2500 cli.py\n\u251C\u2500\
    \u2500 config.py\n\u251C\u2500\u2500 core.py\n\u251C\u2500\u2500 exceptions.py\n\
    \u251C\u2500\u2500 graph_visualization.py\n\u251C\u2500\u2500 models.py\n\u251C\
    \u2500\u2500 prompt_engineering.py\n\u251C\u2500\u2500 template_loader.py\n\u251C\
    \u2500\u2500 template_validator.py\ntemplates/              # YAML template files\n\
    specs/                  # Generated specification files\ntests/              \
    \    # Test files"
requirements:
  functional:
  - Generate detailed specifications from high-level prompts
  - Support hierarchical sub-specifications with parent-child relationships
  - Enable template inheritance for reusable specification patterns
  - Provide context-aware AI prompting with user role parameters
  - Track specification relationships and implementation status
  non_functional:
  - Maintain file-based storage for simplicity and transparency
  - Ensure graceful degradation when AI services are unavailable
  - Provide comprehensive error handling and informative messages
  - Support solo developer workflows with minimal setup
  constraints:
  - Use Python 3.12+ for modern language features
  - Maintain CLI interface for automation and scripting
  - Store all data in human-readable YAML format
  - Avoid external databases to keep deployment simple
  - Maintain Windows compatibility (CRLF/LF handling)
  - Keep lint error count minimal (currently <30 from original 134)
  - Use non-blocking pre-commit hooks to show warnings without stopping commits
coding_standards:
- Use dataclasses and Pydantic models for data structures
- Implement async/await for AI API calls
- Follow Python type hints throughout codebase
- Use pathlib.Path for all file operations
- Implement comprehensive error handling with informative messages
- Write unit tests for all new functionality
- Use configuration-driven behavior over hard-coded values
- Maintain lint compliance using ruff with configured ignore rules
- Follow pre-commit hooks for automated code quality checks
- Use CRLF/LF line ending normalization via .gitattributes
- Avoid mutable default arguments in function signatures (use None pattern)
- Handle string vs Path parameter conversion consistently
- Use proper exception message formatting without string literals in raise statements
key_design_patterns:
- Template inheritance with deep merging strategy
- Context-aware AI prompting with parameter injection
- Configuration-driven workflow behavior
- Graph-based specification relationships
- Graceful AI fallback mechanisms
- Step-based implementation tracking with unique IDs
development_workflows:
- Use make commands for all development tasks (make lint, make test, make format)
- Run make quality-gate for comprehensive quality checks before commits
- Use make spec-complete for automated specification workflow (commit + publish)
- Always run make lint before generating specifications to provide context
- Follow git pre-commit hooks with non-blocking lint warnings
- Use agentic-spec tool to generate implementation specifications
- Sync foundation spec regularly with agentic-spec sync-foundation
- Maintain TodoWrite tracking for complex multi-step tasks
code_quality_config:
  ruff_ignored_rules:
    - E501  # line too long (handled by formatter)
    - B008  # function calls in argument defaults (Typer CLI pattern)
    - TRY300  # consider moving to else block
    - TRY301  # abstract raise to inner function
    - ARG001  # unused function argument (CLI patterns)
    - ARG002  # unused method argument (interface implementations)
    - PLR0912  # too many branches (CLI functions)
    - PLR0913  # too many arguments (CLI functions)
    - PLR0915  # too many statements (CLI functions)
  pre_commit_hooks:
    - ruff (linting with --fix --exit-zero)
    - ruff-format (code formatting)
    - trim-trailing-whitespace
    - end-of-file-fixer
    - check-yaml
    - check-toml
current_project_status:
  lint_compliance: Significantly improved (134 â†’ <30 errors, 85% reduction)
  test_suite: Passing with proper async handling and mocking
  git_hooks: Configured for non-blocking warnings with automatic formatting
  line_endings: Properly configured via .gitattributes for Windows development
  recent_improvements:
    - Fixed mutable default arguments pattern (B008 errors)
    - Resolved string vs Path parameter handling issues
    - Implemented proper exception message formatting
    - Added comprehensive .gitattributes for cross-platform compatibility
    - Updated pre-commit configuration for developer-friendly workflow
    - Reduced complexity in CLI functions while maintaining functionality
_last_synced: '2025-07-26T21:24:47.352183'
_sync_version: '1.1'
